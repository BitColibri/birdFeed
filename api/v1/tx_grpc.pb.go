// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: bitcolibri/birdFeed/v1/tx.proto

package birdFeedv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_InitUser_FullMethodName     = "/bitcolibri.birdFeed.v1.Msg/InitUser"
	Msg_FollowUser_FullMethodName   = "/bitcolibri.birdFeed.v1.Msg/FollowUser"
	Msg_UnfollowUser_FullMethodName = "/bitcolibri.birdFeed.v1.Msg/UnfollowUser"
	Msg_PublishTweet_FullMethodName = "/bitcolibri.birdFeed.v1.Msg/PublishTweet"
	Msg_RemoveTweet_FullMethodName  = "/bitcolibri.birdFeed.v1.Msg/RemoveTweet"
	Msg_LikeTweet_FullMethodName    = "/bitcolibri.birdFeed.v1.Msg/LikeTweet"
	Msg_UnlikeTweet_FullMethodName  = "/bitcolibri.birdFeed.v1.Msg/UnlikeTweet"
	Msg_CommentTweet_FullMethodName = "/bitcolibri.birdFeed.v1.Msg/CommentTweet"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	InitUser(ctx context.Context, in *MsgInitUser, opts ...grpc.CallOption) (*MsgInitUserResponse, error)
	FollowUser(ctx context.Context, in *MsgFollowUser, opts ...grpc.CallOption) (*MsgFollowUserResponse, error)
	UnfollowUser(ctx context.Context, in *MsgUnfollowUser, opts ...grpc.CallOption) (*MsgUnfollowUserResponse, error)
	// CreateGame create a game.
	PublishTweet(ctx context.Context, in *MsgPublishTweet, opts ...grpc.CallOption) (*MsgPublishTweetResponse, error)
	RemoveTweet(ctx context.Context, in *MsgRemoveTweet, opts ...grpc.CallOption) (*MsgRemoveTweetResponse, error)
	LikeTweet(ctx context.Context, in *MsgLikeTweet, opts ...grpc.CallOption) (*MsgLikeTweetResponse, error)
	UnlikeTweet(ctx context.Context, in *MsgUnlikeTweet, opts ...grpc.CallOption) (*MsgUnlikeTweetResponse, error)
	CommentTweet(ctx context.Context, in *MsgCommentTweet, opts ...grpc.CallOption) (*MsgCommentTweetResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) InitUser(ctx context.Context, in *MsgInitUser, opts ...grpc.CallOption) (*MsgInitUserResponse, error) {
	out := new(MsgInitUserResponse)
	err := c.cc.Invoke(ctx, Msg_InitUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FollowUser(ctx context.Context, in *MsgFollowUser, opts ...grpc.CallOption) (*MsgFollowUserResponse, error) {
	out := new(MsgFollowUserResponse)
	err := c.cc.Invoke(ctx, Msg_FollowUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnfollowUser(ctx context.Context, in *MsgUnfollowUser, opts ...grpc.CallOption) (*MsgUnfollowUserResponse, error) {
	out := new(MsgUnfollowUserResponse)
	err := c.cc.Invoke(ctx, Msg_UnfollowUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PublishTweet(ctx context.Context, in *MsgPublishTweet, opts ...grpc.CallOption) (*MsgPublishTweetResponse, error) {
	out := new(MsgPublishTweetResponse)
	err := c.cc.Invoke(ctx, Msg_PublishTweet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveTweet(ctx context.Context, in *MsgRemoveTweet, opts ...grpc.CallOption) (*MsgRemoveTweetResponse, error) {
	out := new(MsgRemoveTweetResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveTweet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LikeTweet(ctx context.Context, in *MsgLikeTweet, opts ...grpc.CallOption) (*MsgLikeTweetResponse, error) {
	out := new(MsgLikeTweetResponse)
	err := c.cc.Invoke(ctx, Msg_LikeTweet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnlikeTweet(ctx context.Context, in *MsgUnlikeTweet, opts ...grpc.CallOption) (*MsgUnlikeTweetResponse, error) {
	out := new(MsgUnlikeTweetResponse)
	err := c.cc.Invoke(ctx, Msg_UnlikeTweet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CommentTweet(ctx context.Context, in *MsgCommentTweet, opts ...grpc.CallOption) (*MsgCommentTweetResponse, error) {
	out := new(MsgCommentTweetResponse)
	err := c.cc.Invoke(ctx, Msg_CommentTweet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	InitUser(context.Context, *MsgInitUser) (*MsgInitUserResponse, error)
	FollowUser(context.Context, *MsgFollowUser) (*MsgFollowUserResponse, error)
	UnfollowUser(context.Context, *MsgUnfollowUser) (*MsgUnfollowUserResponse, error)
	// CreateGame create a game.
	PublishTweet(context.Context, *MsgPublishTweet) (*MsgPublishTweetResponse, error)
	RemoveTweet(context.Context, *MsgRemoveTweet) (*MsgRemoveTweetResponse, error)
	LikeTweet(context.Context, *MsgLikeTweet) (*MsgLikeTweetResponse, error)
	UnlikeTweet(context.Context, *MsgUnlikeTweet) (*MsgUnlikeTweetResponse, error)
	CommentTweet(context.Context, *MsgCommentTweet) (*MsgCommentTweetResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) InitUser(context.Context, *MsgInitUser) (*MsgInitUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitUser not implemented")
}
func (UnimplementedMsgServer) FollowUser(context.Context, *MsgFollowUser) (*MsgFollowUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedMsgServer) UnfollowUser(context.Context, *MsgUnfollowUser) (*MsgUnfollowUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowUser not implemented")
}
func (UnimplementedMsgServer) PublishTweet(context.Context, *MsgPublishTweet) (*MsgPublishTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishTweet not implemented")
}
func (UnimplementedMsgServer) RemoveTweet(context.Context, *MsgRemoveTweet) (*MsgRemoveTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTweet not implemented")
}
func (UnimplementedMsgServer) LikeTweet(context.Context, *MsgLikeTweet) (*MsgLikeTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeTweet not implemented")
}
func (UnimplementedMsgServer) UnlikeTweet(context.Context, *MsgUnlikeTweet) (*MsgUnlikeTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeTweet not implemented")
}
func (UnimplementedMsgServer) CommentTweet(context.Context, *MsgCommentTweet) (*MsgCommentTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentTweet not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_InitUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_InitUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitUser(ctx, req.(*MsgInitUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFollowUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_FollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FollowUser(ctx, req.(*MsgFollowUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnfollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnfollowUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnfollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UnfollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnfollowUser(ctx, req.(*MsgUnfollowUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PublishTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPublishTweet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PublishTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PublishTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PublishTweet(ctx, req.(*MsgPublishTweet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveTweet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveTweet(ctx, req.(*MsgRemoveTweet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LikeTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLikeTweet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LikeTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_LikeTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LikeTweet(ctx, req.(*MsgLikeTweet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnlikeTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnlikeTweet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnlikeTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UnlikeTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnlikeTweet(ctx, req.(*MsgUnlikeTweet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CommentTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCommentTweet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CommentTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CommentTweet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CommentTweet(ctx, req.(*MsgCommentTweet))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bitcolibri.birdFeed.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitUser",
			Handler:    _Msg_InitUser_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _Msg_FollowUser_Handler,
		},
		{
			MethodName: "UnfollowUser",
			Handler:    _Msg_UnfollowUser_Handler,
		},
		{
			MethodName: "PublishTweet",
			Handler:    _Msg_PublishTweet_Handler,
		},
		{
			MethodName: "RemoveTweet",
			Handler:    _Msg_RemoveTweet_Handler,
		},
		{
			MethodName: "LikeTweet",
			Handler:    _Msg_LikeTweet_Handler,
		},
		{
			MethodName: "UnlikeTweet",
			Handler:    _Msg_UnlikeTweet_Handler,
		},
		{
			MethodName: "CommentTweet",
			Handler:    _Msg_CommentTweet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitcolibri/birdFeed/v1/tx.proto",
}
